let User,jwt;_ce9‍.x([["register",()=>register],["login",()=>login]]);_ce9‍.w("../models/user",[["default",["User"],function(v){User=v}]]);_ce9‍.w("jsonwebtoken",[["default",["jwt"],function(v){jwt=v}]]);
 
       const register = async (req, res) => {
  _ce9‍.g.console.log(req.body);
  const {name,email,password} = req.body;  
  // for validation

  if(!name) return res.status(400).send("Name is required");
  if(!password || password.length < 6) return res.status(400).send("Password is required and should be min 6 characters long");

  let userExist = await User.findOne({email}).exec();
  if(userExist) return res.status(400).send("Email is taken");
  //register
  const user = new User(req.body)
  try{
    await user.save();
    _ce9‍.g.console.log("USER CREATED", user);
    return res.json({ok:true});

  } catch (err) {
    _ce9‍.g.console.log("CREATE USER FAILED",err);
    return res.status(400).send("Error. Try again.");
  }
}; 

       const login = async (req, res) => {
  //console.log(req.body);
  const {email, password} = req.body;
  try {
    let user = await User.findOne({ email }).exec();
    if (!user) res.status(400).send("User with that email not found");
    
    user.comparePassword(password, (err,match) => {
      _ce9‍.g.console.log("COMPARE PASSWORD IN LOGIN ERR",err);
      if (!match || err) return res.status(400).send("WRONG PASSWORD");
      let token = jwt.sign({_id:user._id}, process.env.JWT_SECRET,{
        expiresIn: "7d",
      });
      res.json({token, user});

    });
  } catch (err) {
    _ce9‍.g.console.log("LOGIN ERROR",err);
    res.status(400).send("Signin failed");
  }
};